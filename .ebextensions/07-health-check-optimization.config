option_settings:
  # Health check optimization
  aws:elasticbeanstalk:environment:process:default:
    HealthCheckInterval: 30
    HealthCheckTimeout: 10
    HealthCheckPath: /health
    HealthyThresholdCount: 2
    UnhealthyThresholdCount: 3
    Port: 5000
    Protocol: HTTP
    
  # Enhanced health reporting
  aws:elasticbeanstalk:healthreporting:system:
    SystemType: enhanced
    EnhancedHealthAuthEnabled: true
    
  # Application health check settings
  aws:elasticbeanstalk:application:
    Application Healthcheck URL: /health

files:
  # Create a simple health check endpoint handler
  "/opt/elasticbeanstalk/hooks/appdeploy/post/03_create_health_endpoint.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Create a lightweight health check endpoint if application doesn't provide one
      
      # Check if application provides /health endpoint
      sleep 30  # Wait for application to start
      
      HEALTH_CHECK=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/health)
      
      if [ "$HEALTH_CHECK" != "200" ]; then
        echo "Creating fallback health check endpoint..."
        
        # Create a simple health check responder
        cat > /usr/local/bin/health-check-server.py << 'EOF'
      #!/usr/bin/env python3
      from http.server import HTTPServer, BaseHTTPRequestHandler
      import json
      import os
      import psutil
      import subprocess
      from datetime import datetime
      
      class HealthHandler(BaseHTTPRequestHandler):
          def do_GET(self):
              if self.path == '/health':
                  self.send_response(200)
                  self.send_header('Content-type', 'application/json')
                  self.end_headers()
                  
                  # Check Java process
                  java_running = False
                  java_pid = None
                  for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                      if 'java' in proc.info['name'] and 'application.jar' in ' '.join(proc.info['cmdline']):
                          java_running = True
                          java_pid = proc.info['pid']
                          break
                  
                  # Get system metrics
                  cpu_percent = psutil.cpu_percent(interval=1)
                  memory = psutil.virtual_memory()
                  disk = psutil.disk_usage('/')
                  
                  health_status = {
                      'status': 'healthy' if java_running else 'unhealthy',
                      'timestamp': datetime.utcnow().isoformat(),
                      'application': {
                          'java_running': java_running,
                          'pid': java_pid
                      },
                      'system': {
                          'cpu_percent': cpu_percent,
                          'memory_percent': memory.percent,
                          'disk_percent': disk.percent
                      }
                  }
                  
                  self.wfile.write(json.dumps(health_status).encode())
              else:
                  self.send_response(404)
                  self.end_headers()
          
          def log_message(self, format, *args):
              # Suppress logs for health checks
              if '/health' not in self.path:
                  super().log_message(format, *args)
      
      if __name__ == '__main__':
          server = HTTPServer(('0.0.0.0', 8080), HealthHandler)
          print('Health check server running on port 8080...')
          server.serve_forever()
      EOF
        
        chmod +x /usr/local/bin/health-check-server.py
        
        # Install required Python packages
        pip3 install psutil
        
        # Start health check server
        nohup python3 /usr/local/bin/health-check-server.py > /var/log/eb-app/health-server.log 2>&1 &
        
        # Update nginx to proxy health checks
        cat > /etc/nginx/conf.d/health-check.conf << 'EOF'
      location /health {
          proxy_pass http://127.0.0.1:8080/health;
          proxy_http_version 1.1;
          proxy_set_header Connection "";
          proxy_connect_timeout 2s;
          proxy_send_timeout 2s;
          proxy_read_timeout 2s;
          access_log off;
      }
      EOF
        
        # Reload nginx
        nginx -s reload
      fi

  # Health check monitoring script
  "/usr/local/bin/monitor-health.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Monitor application health and take corrective actions
      
      LOG_FILE="/var/log/eb-app/health-monitor.log"
      UNHEALTHY_COUNT=0
      MAX_UNHEALTHY=3
      
      while true; do
        TIMESTAMP=$(date +%Y-%m-%d_%H:%M:%S)
        
        # Check application health
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://localhost:5000/health)
        
        if [ "$HTTP_CODE" != "200" ]; then
          UNHEALTHY_COUNT=$((UNHEALTHY_COUNT + 1))
          echo "$TIMESTAMP Health check failed. HTTP code: $HTTP_CODE. Count: $UNHEALTHY_COUNT" >> $LOG_FILE
          
          if [ $UNHEALTHY_COUNT -ge $MAX_UNHEALTHY ]; then
            echo "$TIMESTAMP Taking corrective action..." >> $LOG_FILE
            
            # Check if Java process is running
            JAVA_PID=$(pgrep -f "java.*application.jar")
            
            if [ -z "$JAVA_PID" ]; then
              echo "$TIMESTAMP Java process not found. Attempting restart..." >> $LOG_FILE
              # Restart application
              /opt/elasticbeanstalk/bin/restart-app-server
            else
              # Java is running but not responding
              echo "$TIMESTAMP Java process found (PID: $JAVA_PID) but not responding" >> $LOG_FILE
              
              # Capture thread dump for debugging
              kill -3 $JAVA_PID
              
              # Give it one more chance
              sleep 10
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 http://localhost:5000/health)
              
              if [ "$HTTP_CODE" != "200" ]; then
                echo "$TIMESTAMP Restarting unresponsive Java process..." >> $LOG_FILE
                kill -9 $JAVA_PID
                /opt/elasticbeanstalk/bin/restart-app-server
              fi
            fi
            
            UNHEALTHY_COUNT=0
          fi
        else
          if [ $UNHEALTHY_COUNT -gt 0 ]; then
            echo "$TIMESTAMP Health check recovered" >> $LOG_FILE
          fi
          UNHEALTHY_COUNT=0
        fi
        
        sleep 30
      done

container_commands:
  01_start_health_monitor:
    command: "nohup /usr/local/bin/monitor-health.sh > /dev/null 2>&1 &"
    leader_only: true