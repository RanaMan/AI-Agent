files:
  # Nginx main configuration optimization
  "/etc/nginx/nginx.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      user nginx;
      worker_processes auto;
      worker_rlimit_nofile 65536;
      pid /var/run/nginx.pid;
      
      events {
          worker_connections 4096;
          use epoll;
          multi_accept on;
      }
      
      http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
          
          # Logging optimization
          access_log /var/log/nginx/access.log combined buffer=32k flush=5m;
          error_log /var/log/nginx/error.log warn;
          
          # Basic settings
          sendfile on;
          tcp_nopush on;
          tcp_nodelay on;
          keepalive_timeout 65;
          keepalive_requests 100;
          reset_timedout_connection on;
          client_body_timeout 10;
          client_header_timeout 10;
          send_timeout 10;
          
          # Buffer sizes
          client_body_buffer_size 128k;
          client_max_body_size 10m;
          client_header_buffer_size 1k;
          large_client_header_buffers 4 8k;
          output_buffers 32 32k;
          postpone_output 1460;
          
          # Gzip compression
          gzip on;
          gzip_vary on;
          gzip_proxied any;
          gzip_comp_level 6;
          gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;
          gzip_min_length 1000;
          gzip_disable "msie6";
          
          # Security headers
          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-XSS-Protection "1; mode=block" always;
          
          # Rate limiting
          limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
          limit_req_zone $binary_remote_addr zone=health_limit:1m rate=30r/m;
          limit_conn_zone $binary_remote_addr zone=addr:10m;
          
          # Upstream configuration
          upstream app_backend {
              server 127.0.0.1:5000 max_fails=3 fail_timeout=30s;
              keepalive 32;
          }
          
          # Include additional configurations
          include /etc/nginx/conf.d/*.conf;
      }

  # Nginx site configuration for the Java application
  "/etc/nginx/conf.d/app.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
          listen 80 default_server;
          listen [::]:80 default_server;
          server_name _;
          
          # Root directory
          root /var/app/current;
          
          # Logs
          access_log /var/log/nginx/app-access.log combined buffer=32k;
          error_log /var/log/nginx/app-error.log warn;
          
          # Connection limits
          limit_conn addr 100;
          
          # Health check endpoint (no rate limiting)
          location /health {
              proxy_pass http://app_backend/health;
              proxy_http_version 1.1;
              proxy_set_header Connection "";
              proxy_connect_timeout 2s;
              proxy_send_timeout 2s;
              proxy_read_timeout 2s;
              access_log off;
          }
          
          # API endpoints with rate limiting
          location /api/ {
              limit_req zone=api_limit burst=20 nodelay;
              
              proxy_pass http://app_backend;
              proxy_http_version 1.1;
              
              # Headers
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header Connection "";
              
              # Timeouts
              proxy_connect_timeout 30s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
              
              # Buffering
              proxy_buffering on;
              proxy_buffer_size 4k;
              proxy_buffers 8 4k;
              proxy_busy_buffers_size 8k;
              
              # Cache headers
              add_header X-Cache-Status $upstream_cache_status;
          }
          
          # Main application
          location / {
              proxy_pass http://app_backend;
              proxy_http_version 1.1;
              
              # Headers
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_set_header Connection "";
              
              # Timeouts for LangChain4j AI responses
              proxy_connect_timeout 30s;
              proxy_send_timeout 120s;
              proxy_read_timeout 120s;
              
              # Buffering
              proxy_buffering on;
              proxy_buffer_size 4k;
              proxy_buffers 8 4k;
              proxy_busy_buffers_size 8k;
          }
          
          # Static files (if any)
          location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt)$ {
              expires 7d;
              add_header Cache-Control "public, immutable";
              access_log off;
          }
          
          # Deny access to hidden files
          location ~ /\. {
              deny all;
              access_log off;
              log_not_found off;
          }
      }

  # Nginx performance monitoring script
  "/usr/local/bin/monitor-nginx.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Monitor nginx performance and connections
      
      LOG_FILE="/var/log/nginx/performance.log"
      
      while true; do
        TIMESTAMP=$(date +%Y-%m-%d_%H:%M:%S)
        
        # Get nginx connection stats
        STATS=$(curl -s http://127.0.0.1/nginx_status 2>/dev/null)
        
        if [ -n "$STATS" ]; then
          ACTIVE=$(echo "$STATS" | awk '/Active connections:/ {print $3}')
          READING=$(echo "$STATS" | awk '/Reading:/ {print $2}')
          WRITING=$(echo "$STATS" | awk '/Writing:/ {print $4}')
          WAITING=$(echo "$STATS" | awk '/Waiting:/ {print $6}')
          
          echo "$TIMESTAMP Active:$ACTIVE Reading:$READING Writing:$WRITING Waiting:$WAITING" >> $LOG_FILE
          
          # Alert if connections are too high
          if [ "$ACTIVE" -gt 1000 ]; then
            echo "$TIMESTAMP WARNING: High active connections: $ACTIVE" >> $LOG_FILE
          fi
        fi
        
        sleep 60
      done

  # Enable nginx status page
  "/etc/nginx/conf.d/status.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      server {
          listen 127.0.0.1:80;
          server_name localhost;
          
          location /nginx_status {
              stub_status on;
              access_log off;
              allow 127.0.0.1;
              deny all;
          }
      }

commands:
  01_test_nginx_config:
    command: "nginx -t"
  
  02_reload_nginx:
    command: "nginx -s reload || service nginx restart"

container_commands:
  01_start_nginx_monitor:
    command: "nohup /usr/local/bin/monitor-nginx.sh > /dev/null 2>&1 &"
    leader_only: true
  
  02_optimize_nginx_cache:
    command: |
      # Create cache directory
      mkdir -p /var/cache/nginx
      chown nginx:nginx /var/cache/nginx
      
      # Log optimization status
      echo "Nginx optimization completed at $(date)" >> /var/log/eb-app/optimization.log