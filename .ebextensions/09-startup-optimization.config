files:
  # Application startup optimization script
  "/opt/elasticbeanstalk/hooks/appdeploy/pre/00_warmup_jvm.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # JVM warmup and optimization before deployment
      
      echo "Preparing JVM optimization settings..."
      
      # Pre-compile critical classes to reduce startup time
      export JAVA_OPTS="$JAVA_OPTS -XX:+TieredCompilation -XX:TieredStopAtLevel=1"
      
      # Enable AppCDS (Application Class Data Sharing) for faster startup
      export JAVA_OPTS="$JAVA_OPTS -XX:+UseAppCDS -XX:SharedArchiveFile=/var/app/app-cds.jsa"
      
      # Pre-touch all memory pages to avoid runtime allocation delays
      export JAVA_OPTS="$JAVA_OPTS -XX:+AlwaysPreTouch"
      
      # Optimize for LangChain4j startup
      export JAVA_OPTS="$JAVA_OPTS -Djava.security.egd=file:/dev/./urandom"
      export JAVA_OPTS="$JAVA_OPTS -Dspring.jmx.enabled=false"
      export JAVA_OPTS="$JAVA_OPTS -Dspring.config.location=classpath:/"
      
      echo "JVM optimization settings applied"

  # Create optimized startup script
  "/opt/elasticbeanstalk/hooks/appdeploy/post/04_optimize_startup.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Post-deployment startup optimization
      
      APP_DIR="/var/app/current"
      JAR_FILE="$APP_DIR/application.jar"
      
      # Wait for application to be deployed
      while [ ! -f "$JAR_FILE" ]; do
        sleep 1
      done
      
      # Generate AppCDS archive for faster subsequent startups
      if [ ! -f "/var/app/app-cds.jsa" ]; then
        echo "Generating AppCDS archive for faster startup..."
        java -Xshare:dump -XX:SharedArchiveFile=/var/app/app-cds.jsa \
             -cp "$JAR_FILE" \
             --add-modules ALL-MODULE-PATH 2>/dev/null || true
      fi
      
      # Warm up the application with initial requests
      echo "Warming up application..."
      sleep 30  # Wait for app to start
      
      # Send warmup requests
      for i in {1..5}; do
        curl -s -o /dev/null http://localhost:5000/health || true
        sleep 1
      done
      
      echo "Application warmup completed"

  # Connection pool pre-warming for Anthropic API
  "/opt/elasticbeanstalk/hooks/appdeploy/post/05_warmup_connections.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      # Pre-warm HTTP connections to Anthropic API
      
      # DNS pre-resolution
      echo "Pre-resolving Anthropic API DNS..."
      nslookup api.anthropic.com > /dev/null 2>&1
      
      # Pre-establish TCP connections (without actual API calls)
      echo "Pre-warming connection pools..."
      for i in {1..3}; do
        timeout 2 bash -c 'exec 3<>/dev/tcp/api.anthropic.com/443' 2>/dev/null || true
        exec 3>&- 2>/dev/null || true
      done
      
      echo "Connection pre-warming completed"

commands:
  01_install_warmup_deps:
    command: "yum install -y bind-utils -q"

option_settings:
  # Startup timeout configuration
  aws:elasticbeanstalk:command:
    Timeout: 600  # 10 minutes for startup
    
  # Application startup settings
  aws:elasticbeanstalk:application:environment:
    JAVA_OPTS_STARTUP: "-XX:InitialRAMPercentage=50 -XX:MaxRAMPercentage=70 -XX:+ExitOnOutOfMemoryError"
    APPLICATION_STARTUP_TIMEOUT: "300"
    WARMUP_ENABLED: "true"